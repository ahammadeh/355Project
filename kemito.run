reset;

model kemito.mod;

#initialise dummy supplies to be used if needed
param AvocadoCostFromDummy {AVOCADO_DEMANDS} default 0;
param AppleCostFromDummy {APPLE_DEMANDS} default 0;

param AvocadoDifference;
param AppleDifference;

data kemito.dat;

let {s in SIZES} MachineCost[s] := MachineCost[s] * 1000; # Multiply all machine costs by 1000 to keep units the same.

#Cost array
let {(i, j) in AVOCADO_ARCS} AvocadoCost[i,j] := if (i in AVOCADO_SUPPLIERS) and (j in PACKHOUSES) then AvocadoSupplierToPackhouse[i,j] else if (i in PACKHOUSES) and (j in AVOCADO_DEMANDS) then AvocadoPackhouseToDemand[i,j];
let {(i, j) in APPLE_ARCS} AppleCost[i,j] := if (i in APPLE_SUPPLIERS) and (j in PACKHOUSES) then AppleSupplierToPackhouse[i,j] else if (i in PACKHOUSES) and (j in APPLE_DEMANDS) then ApplePackhouseToDemand[i,j];

#check and add dummy supply for avocado if needed
let AvocadoDifference := (sum {d in AVOCADO_DEMANDS} AvocadoDemand[d]) - (sum {s in AVOCADO_SUPPLIERS} AvocadoSupply[s]);

if AvocadoDifference > 0 then
{
  let AVOCADO_SUPPLIERS := AVOCADO_SUPPLIERS union {'Dummy'};
  let AvocadoSupply['Dummy'] := AvocadoDifference;
  let {d in PACKHOUSES} AvocadoCost['Dummy', d] := AvocadoCostFromDummy[d];
}; # else the problem is oversupplied or balanced

# Make sure the problem is oversupplied or balanced
check : sum {s in AVOCADO_SUPPLIERS} AvocadoSupply[s] >= sum {d in AVOCADO_DEMANDS} AvocadoDemand[d];

#check and add dummy supply for apple if needed
let AppleDifference := (sum {d in APPLE_DEMANDS} AppleDemand[d]) - (sum {s in APPLE_SUPPLIERS} AppleSupply[s]);

if AppleDifference > 0 then
{
  let APPLE_SUPPLIERS := APPLE_SUPPLIERS union {'Dummy'};
  let AppleSupply['Dummy'] := AppleDifference;
  let {d in PACKHOUSES} AvocadoCost['Dummy', d] := AppleCostFromDummy[d];
}; # else the problem is oversupplied or balanced

# Make sure the problem is oversupplied or balanced
check : sum {s in APPLE_SUPPLIERS} AppleSupply[s] >= sum {d in APPLE_DEMANDS} AppleDemand[d];

option solver './gurobi';

for {h in HISTORICAL}
{
	let {i in AVOCADO_DEMANDS} AvocadoDemand[i] := AvocadoDemandHistorical[i,h];
	let {j in APPLE_DEMANDS} AppleDemand[j] := AppleDemandHistorical[j,h];

	solve;
	display AvocadoBuild;
	display AvocadoFlow;
	display AppleBuild;
	display AppleFlow;
	display TotalCost;
}
