reset;

model kemito.mod;

#initialise dummy supplies to be used if needed
param AvocadoCostFromDummy {AVOCADODEMANDS} default 0;
param AppleCostFromDummy {APPLEDEMANDS} default 0;

param AvocadoDifference;
param AppleDifference;

data kemito.dat;

#Cost array
let {(i, j) in ARCS} Cost[i,j] := if (i in AVOCADOSUPPLIERS) and (j in PACKHOUSES) then AvocadoSupplierToPackhouse[i,j] else if (i in PACKHOUSES) and (j in AVOCADODEMANDS) then AvocadoPackhouseToDemand[i,j];
let {(i, j) in APPLEARCS} AppleCost[i,j] := if (i in APPLESUPPLIERS) and (j in PACKHOUSES) then AppleSupplierToPackhouse[i,j] else if (i in PACKHOUSES) and (j in APPLEDEMANDS) then ApplePackhouseToDemand[i,j];

#check and add dummy supply for avocado if needed
let AvocadoDifference := (sum {d in AVOCADODEMANDS} AvocadoDemand[d]) - (sum {s in AVOCADOSUPPLIERS} AvocadoSupply[s]);                  

if AvocadoDifference > 0 then
{
  let AVOCADOSUPPLIERS := AVOCADOSUPPLIERS union {'Dummy'};
  let AvocadoSupply['Dummy'] := AvocadoDifference;
  let {d in PACKHOUSES} Cost['Dummy', d] := AvocadoCostFromDummy[d];
}; # else the problem is oversupplied or balanced

# Make sure the problem is oversupplied or balanced
check : sum {s in AVOCADOSUPPLIERS} AvocadoSupply[s] >= sum {d in AVOCADODEMANDS} AvocadoDemand[d];

#check and add dummy supply for apple if needed
let AppleDifference := (sum {d in APPLEDEMANDS} AppleDemand[d]) - (sum {s in APPLESUPPLIERS} AppleSupply[s]);                  

if AppleDifference > 0 then
{
  let APPLESUPPLIERS := APPLESUPPLIERS union {'Dummy'};
  let AppleSupply['Dummy'] := AppleDifference;
  let {d in PACKHOUSES} Cost['Dummy', d] := AppleCostFromDummy[d];
}; # else the problem is oversupplied or balanced

# Make sure the problem is oversupplied or balanced
check : sum {s in APPLESUPPLIERS} AppleSupply[s] >= sum {d in APPLEDEMANDS} AppleDemand[d];

option solver gurobi;

for {h in HISTORICAL}
{
	let {i in AVOCADODEMANDS} AvocadoDemand[i] := AvocadoDemandHistorical[i,h];
	let {j in APPLEDEMANDS} AppleDemand[j] := AppleDemandHistorical[j,h];

	solve;
	display Build;
	display Flow;
	display AppleBuild;
	display AppleFlow;
	display TotalCost;
}
